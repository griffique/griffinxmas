"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var safelyParseJson_1 = __importDefault(require("./safelyParseJson"));
var isClient_1 = __importDefault(require("./isClient"));
var isAPISupported_1 = __importDefault(require("./isAPISupported"));
var isDevelopment_1 = __importDefault(require("./isDevelopment"));
/**
 * An utility to quickly create hooks to access both Session Storage and Local Storage
 */
var createStorageHook = function (type) {
    var storageName = type + "Storage";
    if (isClient_1.default && !(0, isAPISupported_1.default)(storageName)) {
        // eslint-disable-next-line no-console
        console.warn(storageName + " is not supported");
    }
    /**
     * the hook
     */
    return function (storageKey, defaultValue) {
        if (!isClient_1.default) {
            if (isDevelopment_1.default) {
                // eslint-disable-next-line no-console
                console.warn("Please be aware that " + storageName + " could not be available during SSR");
            }
            return [JSON.stringify(defaultValue), function () { return undefined; }];
        }
        var storage = window[storageName];
        var _a = (0, react_1.useState)((0, safelyParseJson_1.default)(storage.getItem(storageKey) || JSON.stringify(defaultValue))), value = _a[0], setValue = _a[1];
        (0, react_1.useEffect)(function () {
            storage.setItem(storageKey, JSON.stringify(value));
        }, [storageKey, value]);
        return [value, setValue];
    };
};
exports.default = createStorageHook;
