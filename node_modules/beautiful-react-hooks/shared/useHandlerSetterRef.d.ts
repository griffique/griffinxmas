import { MutableRefObject } from 'react';
import { CallbackSetter } from './types';
declare type HandlerPair<T> = readonly [
    handler: MutableRefObject<T>,
    setHandler: CallbackSetter<T>
];
/**
 * Returns an object where the first item is the [ref](https://reactjs.org/docs/hooks-reference.html#useref) to a
 * callback function and the second one is setter for that function.
 *
 * Although it function looks quite similar to the [useState](https://reactjs.org/docs/hooks-reference.html#usestate),
 * hook, in this case the setter just makes sure the given callback is indeed a new function.<br /><br />
 * **Setting a callback ref does not force your component to re-render.**<br /><br />
 *
 * `useHandlerSetter` is useful when abstracting other hooks to possibly implement handlers setters.
 */
declare const useHandlerSetterRef: <T extends (...args: any[]) => any>(handler?: T) => HandlerPair<T>;
export default useHandlerSetterRef;
