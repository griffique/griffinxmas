import { MutableRefObject } from 'react';
import { CallbackSetter } from './shared/types';
declare type DragEventCallback = (event: DragEvent) => any;
declare type DragEventsMap = {
    readonly onDrag: CallbackSetter<DragEventCallback>;
    readonly onDrop: CallbackSetter<DragEventCallback>;
    readonly onDragEnter: CallbackSetter<DragEventCallback>;
    readonly onDragEnd: CallbackSetter<DragEventCallback>;
    readonly onDragExit: CallbackSetter<DragEventCallback>;
    readonly onDragLeave: CallbackSetter<DragEventCallback>;
    readonly onDragOver: CallbackSetter<DragEventCallback>;
    readonly onDragStart: CallbackSetter<DragEventCallback>;
};
/**
 * Returns an object of callback setters to handle the drag-related events.
 * It accepts a DOM ref representing the events target (where attach the events to).
 *
 * Returned callback setters: `onDrag`, `onDrop`, `onDragEnter`, `onDragEnd`, `onDragExit`, `onDragLeave`,
 * `onDragOver`, `onDragStart`;
 */
declare const useDragEvents: <T extends HTMLElement>(targetRef: MutableRefObject<T>, setDraggable?: boolean) => DragEventsMap;
export default useDragEvents;
