"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useGeolocationEvents_1 = __importDefault(require("./useGeolocationEvents"));
var geolocationStandardOptions_1 = __importDefault(require("./shared/geolocationStandardOptions"));
var makePositionObject_1 = __importDefault(require("./shared/makePositionObject"));
var isSamePosition_1 = __importDefault(require("./shared/isSamePosition"));
/**
 * Returns a frozen object containing the `position` object, the `isSupported` boolean flag, reporting whether the
 * geolocation API is supported or not and the `isRetrieving` boolean flag reporting whether the hook is fetching the
 * current position.
 * The position is retrieved by using the
 * [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API),
 * when supported.<br/><br />
 * It possibly accepts an object of [geolocation options]
 * (https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) to be used as parameter when using the
 * `Geolocation.getCurrentPosition()` method.
 */
var useGeolocationState = function (options) {
    if (options === void 0) { options = geolocationStandardOptions_1.default; }
    var _a = (0, react_1.useState)(null), position = _a[0], setPosition = _a[1];
    var _b = (0, react_1.useState)(false), isRetrieving = _b[0], setRetrieving = _b[1];
    var _c = (0, useGeolocationEvents_1.default)(options), isSupported = _c.isSupported, onChange = _c.onChange;
    var savePosition = (0, react_1.useCallback)(function () {
        if (position === null) {
            setRetrieving(true);
            navigator.geolocation.getCurrentPosition(function (nextPosition) {
                if (!(0, isSamePosition_1.default)(position, nextPosition)) {
                    setPosition((0, makePositionObject_1.default)(nextPosition));
                    setRetrieving(false);
                }
            });
        }
    }, [position]);
    (0, react_1.useEffect)(savePosition, [position]);
    onChange(savePosition);
    return Object.freeze({
        isSupported: isSupported,
        isRetrieving: isRetrieving,
        position: position,
    });
};
exports.default = useGeolocationState;
