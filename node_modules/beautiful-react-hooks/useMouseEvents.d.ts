import { MutableRefObject } from 'react';
import { CallbackSetter } from './shared/types';
declare type MouseEventCallback = (event: MouseEvent) => any;
export declare type MouseEventsMap = {
    readonly onMouseDown: CallbackSetter<MouseEventCallback>;
    readonly onMouseEnter: CallbackSetter<MouseEventCallback>;
    readonly onMouseLeave: CallbackSetter<MouseEventCallback>;
    readonly onMouseMove: CallbackSetter<MouseEventCallback>;
    readonly onMouseOut: CallbackSetter<MouseEventCallback>;
    readonly onMouseOver: CallbackSetter<MouseEventCallback>;
    readonly onMouseUp: CallbackSetter<MouseEventCallback>;
};
/**
 * Returns a frozen object of callback setters to handle the mouse events.<br/>
 * It accepts a DOM ref representing the events target. <br/>
 * If a target is not provided the events will be globally attached to the document object.
 * <br/>
 * ### Shall the `useMouseEvents` callbacks replace the standard mouse handler props?
 *
 * **They shall not!**<br />
 * **useMouseEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:
 * a drag n drop hook.<br />
 * Using useMouseEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll
 * lose the React SyntheticEvent performance boost.<br />
 * If you were doing something like the following:
 */
declare const useMouseEvents: <T extends HTMLElement>(targetRef?: MutableRefObject<T>) => MouseEventsMap;
export default useMouseEvents;
