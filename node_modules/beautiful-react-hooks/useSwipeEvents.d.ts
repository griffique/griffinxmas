import { MutableRefObject } from 'react';
export declare type SwipeState = {
    clientX?: number;
    clientY?: number;
    direction: 'right' | 'left' | 'up' | 'down';
    alphaX: number;
    alphaY: number;
};
export declare type SwipeCallback = (state: SwipeState) => any;
export declare type UseEventsSwipeOptions = {
    threshold?: number;
    preventDefault?: boolean;
};
/**
 * useSwipeEvents
 * @param targetRef
 * @param options
 */
declare const useSwipeEvents: <T extends HTMLElement>(targetRef?: MutableRefObject<T>, options?: UseEventsSwipeOptions) => Readonly<{
    onSwipeLeft: import("./shared/types").CallbackSetter<SwipeCallback>;
    onSwipeRight: import("./shared/types").CallbackSetter<SwipeCallback>;
    onSwipeUp: import("./shared/types").CallbackSetter<SwipeCallback>;
    onSwipeDown: import("./shared/types").CallbackSetter<SwipeCallback>;
    onSwipeMove: import("./shared/types").CallbackSetter<SwipeCallback>;
    onSwipeStart: import("./shared/types").CallbackSetter<SwipeCallback>;
    onSwipeEnd: import("./shared/types").CallbackSetter<SwipeCallback>;
}>;
export default useSwipeEvents;
