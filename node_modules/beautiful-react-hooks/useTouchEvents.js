"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var useHandlerSetterRef_1 = __importDefault(require("./shared/useHandlerSetterRef"));
var createCbSetterErrorProxy_1 = __importDefault(require("./shared/createCbSetterErrorProxy"));
var safeHasOwnProperty_1 = __importDefault(require("./shared/safeHasOwnProperty"));
var assignEventOnMount_1 = __importDefault(require("./shared/assignEventOnMount"));
/**
 * Returns a frozen object of callback setters to handle the touch events.<br/>
 * It accepts a DOM ref representing the events target. <br/>
 * If a target is not provided the events will be globally attached to the document object.
 * <br/>
 * ### Shall the `useTouchEvents` callbacks replace the standard mouse handler props?
 *
 * **They shall not!**<br />
 * **useTouchEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:
 * a drag n drop hook.<br />
 * Using useTouchEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll
 * lose the React SyntheticEvent performance boost.<br />
 * If you were doing something like the following:
 *
 */
var useTouchEvents = function (targetRef) {
    if (targetRef === void 0) { targetRef = null; }
    var _a = (0, useHandlerSetterRef_1.default)(), onTouchStartHandler = _a[0], setOnTouchStartHandler = _a[1];
    var _b = (0, useHandlerSetterRef_1.default)(), onTouchEndHandler = _b[0], setOnTouchEndHandler = _b[1];
    var _c = (0, useHandlerSetterRef_1.default)(), onTouchCancelHandler = _c[0], setOnTouchCancelHandler = _c[1];
    var _d = (0, useHandlerSetterRef_1.default)(), onTouchMoveHandler = _d[0], setOnTouchMoveHandler = _d[1];
    if (targetRef !== null && !(0, safeHasOwnProperty_1.default)(targetRef, 'current')) {
        return (0, createCbSetterErrorProxy_1.default)('Unable to assign any touch event to the given ref');
    }
    (0, assignEventOnMount_1.default)(targetRef, onTouchStartHandler, 'touchstart');
    (0, assignEventOnMount_1.default)(targetRef, onTouchEndHandler, 'touchend');
    (0, assignEventOnMount_1.default)(targetRef, onTouchCancelHandler, 'touchcancel');
    (0, assignEventOnMount_1.default)(targetRef, onTouchMoveHandler, 'touchmove');
    return Object.freeze({
        onTouchStart: setOnTouchStartHandler,
        onTouchEnd: setOnTouchEndHandler,
        onTouchCancel: setOnTouchCancelHandler,
        onTouchMove: setOnTouchMoveHandler,
    });
};
exports.default = useTouchEvents;
